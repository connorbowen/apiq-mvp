// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// All SECRETS-FIRST-REFACTOR schema changes are implemented.
// If you ever need to migrate legacy credentials, consider adding a secretReference field to ApiCredential for backward compatibility during migration.

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AuthType {
  NONE
  API_KEY
  BEARER_TOKEN
  BASIC_AUTH
  OAUTH2
  CUSTOM
}

enum Status {
  ACTIVE
  INACTIVE
  ERROR
  PENDING
}

enum IngestionStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
  RETRYING
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  DEBUG
}

enum ConnectionStatus {
  draft
  disconnected
  connecting
  connected
  error
  revoked
}

enum OnboardingStage {
  NEW_USER
  FIRST_CONNECTION
  FIRST_WORKFLOW
  COMPLETED
}

enum SecretType {
  API_KEY
  BEARER_TOKEN
  BASIC_AUTH_USERNAME
  BASIC_AUTH_PASSWORD
  OAUTH2_CLIENT_ID
  OAUTH2_CLIENT_SECRET
  OAUTH2_ACCESS_TOKEN
  OAUTH2_REFRESH_TOKEN
  WEBHOOK_SECRET
  SSH_KEY
  CERTIFICATE
  CUSTOM
}

// User Management
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  role      Role      @default(USER)
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Profile fields
  firstName    String?
  lastName     String?
  timezone     String? @default("UTC")
  language     String? @default("en")
  emailVerified Boolean @default(false)
  emailVerifiedAt DateTime?
  
  // Preferences
  notificationsEnabled Boolean @default(true)
  marketingEmailsEnabled Boolean @default(false)
  
  // Onboarding and Progressive Disclosure
  onboardingStage OnboardingStage @default(NEW_USER)
  onboardingCompletedAt DateTime?
  guidedTourCompleted Boolean @default(false)
  
  // SSO Provider Integration
  provider       String? // "okta" | "google" | "azure" | "generic" | "credentials"
  providerUserId String? // External user ID from provider
  refreshToken   String? // Encrypted refresh token for OAuth2
  tokenExpiresAt DateTime? // When the access token expires
  accessToken    String? // Encrypted access token (temporary)

  // Relations
  apiConnections ApiConnection[]
  workflows      Workflow[]
  executions     WorkflowExecution[]
  auditLogs      AuditLog[]
  credentials    ApiCredential[]
  secrets        Secret[]
  workflowShares WorkflowShare[] // Add this relation

  @@map("users")
}

// API Connection Management
model ApiConnection {
  id               String           @id @default(cuid())
  userId           String
  name             String
  description      String?
  baseUrl          String
  authType         AuthType
  authConfig       Json // Encrypted authentication configuration
  documentationUrl String?
  status           Status           @default(ACTIVE)
  connectionStatus ConnectionStatus @default(disconnected)
  oauthState       String?          @unique
  ingestionStatus  IngestionStatus  @default(PENDING)
  rawSpec          String? // Raw OpenAPI specification content
  specHash         String? // SHA-256 hash for change detection
  lastTested       DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // TODO: Add secretId field to reference Secret instead of storing credentials in authConfig
  secretId String? // Reference to the primary secret for this connection

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoints   Endpoint[]
  workflows   WorkflowStep[]
  credentials ApiCredential[]

  @@unique([userId, name])
  @@map("api_connections")
}

// API Endpoints
model Endpoint {
  id              String   @id @default(cuid())
  apiConnectionId String
  path            String
  method          String // GET, POST, PUT, DELETE, PATCH
  summary         String?
  description     String?
  parameters      Json // OpenAPI parameters
  requestBody     Json? // OpenAPI request body
  responses       Json // OpenAPI responses
  responseSchema  Json? // Dereferenced response schema (added for E2E and UI)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  apiConnection ApiConnection @relation(fields: [apiConnectionId], references: [id], onDelete: Cascade)

  @@unique([apiConnectionId, path, method])
  @@map("endpoints")
}

// Workflow Management
model Workflow {
  id          String         @id @default(cuid())
  userId      String
  name        String
  description String?
  status      WorkflowStatus @default(DRAFT)
  isPublic    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps      WorkflowStep[]
  executions WorkflowExecution[]
  shares     WorkflowShare[] // Add this relation

  @@unique([userId, name])
  @@map("workflows")
}

// Workflow Steps
model WorkflowStep {
  id              String   @id @default(cuid())
  workflowId      String
  apiConnectionId String?
  stepOrder       Int
  name            String
  description     String?
  method          String? // HTTP method (e.g., "GET", "POST", "PUT", "DELETE")
  endpoint        String? // API endpoint path (e.g., "/users", "/data")
  parameters      Json // Step-specific parameters
  conditions      Json? // Conditional logic for step execution
  retryConfig     Json? // Retry configuration
  timeout         Int? // Timeout in seconds
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  workflow      Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  apiConnection ApiConnection? @relation(fields: [apiConnectionId], references: [id])

  @@unique([workflowId, stepOrder])
  @@map("workflow_steps")
}

// Workflow Execution
model WorkflowExecution {
  id          String          @id @default(cuid())
  workflowId  String
  userId      String
  status      ExecutionStatus @default(PENDING)
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  error       String?
  result      Json? // Final execution result
  metadata    Json? // Additional execution metadata

  // Enhanced execution state management
  attemptCount Int       @default(0) // Number of execution attempts
  maxAttempts  Int       @default(3) // Maximum number of retry attempts
  retryAfter   DateTime? // When to retry if failed
  queueJobId   String? // PgBoss job ID for queue integration
  queueName    String? // Queue name for job tracking
  pausedAt     DateTime? // When execution was paused
  pausedBy     String? // User ID who paused the execution
  resumedAt    DateTime? // When execution was resumed
  resumedBy    String? // User ID who resumed the execution

  // Execution progress tracking
  currentStep    Int? // Current step being executed (0-based)
  totalSteps     Int  @default(0) // Total number of steps in workflow
  completedSteps Int  @default(0) // Number of completed steps
  failedSteps    Int  @default(0) // Number of failed steps

  // Performance metrics
  executionTime Int? // Total execution time in milliseconds
  stepResults   Json? // Results from individual steps

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workflow Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs     ExecutionLog[]

  @@map("workflow_executions")
}

// Execution Logs
model ExecutionLog {
  id          String   @id @default(cuid())
  executionId String
  stepOrder   Int?
  stepName    String?
  level       LogLevel @default(INFO)
  message     String
  data        Json? // Additional log data
  timestamp   DateTime @default(now())

  // Relations
  execution WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("execution_logs")
}

/// WARNING: Never store secret values or plaintext credentials in audit logs.
model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String // CREATE, UPDATE, DELETE, EXECUTE, etc.
  resource   String // The resource being acted upon
  resourceId String? // ID of the resource
  details    Json? // Additional details about the action
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// API Credentials (Encrypted)
model ApiCredential {
  id              String    @id @default(cuid())
  userId          String
  apiConnectionId String
  encryptedData   String // Encrypted credential data
  keyId           String // Encryption key identifier
  isActive        Boolean   @default(true)
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiConnection ApiConnection @relation(fields: [apiConnectionId], references: [id], onDelete: Cascade)

  @@unique([userId, apiConnectionId])
  @@map("api_credentials")
}

// Secrets Vault (Encrypted)
model Secret {
  id            String    @id @default(cuid())
  userId        String
  name          String
  type          SecretType // Use the SecretType enum for better type safety
  encryptedData String // Encrypted secret data
  keyId         String // Encryption key identifier
  version       Int       @default(1) // Secret version for rotation tracking
  isActive      Boolean   @default(true)
  expiresAt     DateTime?
  metadata      Json? // Additional metadata about the secret

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId, type]) // Index for filtering secrets by user and type
  @@map("secrets")
}

// Email Verification Tokens
model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verification_tokens")
}

// Password Reset Tokens
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

// Workflow Sharing

enum WorkflowPermissionLevel {
  VIEW
  EDIT
  OWNER
}

model WorkflowShare {
  id          String                  @id @default(cuid())
  workflowId  String
  userId      String
  permission  WorkflowPermissionLevel @default(VIEW)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  // Relations
  workflow    Workflow                @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workflowId, userId])
  @@map("workflow_shares")
}
